gp codes




practical1


using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Text;
using System.Windows.Forms;
using Microsoft.DirectX;
using Microsoft.DirectX.Direct3D;
namespace gp2
{
    public partial class Form1 : Form
    {
        Microsoft.DirectX.Direct3D.Device device;
        public Form1() { 
    

 



            InitializeComponent();
            InitDevice();
        }
        public void InitDevice()
        {
            PresentParameters pp = new PresentParameters();
            pp.Windowed = true;
            pp.SwapEffect = SwapEffect.Discard;
            device = new Device(0, DeviceType.Hardware, this,CreateFlags.HardwareVertexProcessing, pp);

        }
        private void Render()
        {
            device.Clear(ClearFlags.Target, Color.Orange, 0, 1);
            device.Present();
        }
        private void Form1_Paint(object sender, PaintEventArgs e)
        {
            Render();
        }
     }
}


--------------------------------------------------------------------------------------------------------------------






practical 2



using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Text;
using System.Windows.Forms;
using Microsoft.DirectX;
using Microsoft.DirectX.Direct3D;

namespace gp4
{

    using Tcverte = CustomVertex.TransformedColored;



    public partial class Form1 : Form
    {
        Microsoft.DirectX.Direct3D.Device device;
        public Form1()
        {
            InitializeComponent();
            InitDevice();
        }
        public void InitDevice()
        {
            PresentParameters pp = new PresentParameters();
            pp.Windowed = true;
            pp.SwapEffect = SwapEffect.Discard;
            device = new Device(0, DeviceType.Hardware, this, CreateFlags.HardwareVertexProcessing, pp);
        }

        public void Render()
        {
            Tcverte[] tt = new Tcverte[3];

            tt[0] = new Tcverte(new Vector4(150, 50, 0, 1), Color.Red.ToArgb());
            tt[1] = new Tcverte(new Vector4(250, 250, 0, 1), Color.Yellow.ToArgb());
            tt[2] = new Tcverte(new Vector4(50, 250, 0, 1), Color.Green.ToArgb());


            device.Clear(ClearFlags.Target, Color.Blue, 0, 1);
            device.BeginScene();
            device.VertexFormat = CustomVertex.TransformedColored.Format;
            device.DrawUserPrimitives(PrimitiveType.TriangleList, 1, tt);
            device.EndScene();
            device.Present();
        }

        public void From1(object sender, PaintEventArgs e)
        {
            Render();
        }
    }
}


--------------------------------------------------------------------------------------------

practical 3




using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Text;
using System.Windows.Forms;
using Microsoft.DirectX;
using Microsoft.DirectX.Direct3D;
namespace gp3
{
    public partial class Form1 : Form
    {
        private Microsoft.DirectX.Direct3D.Device device;
        private CustomVertex.PositionTextured[] vertex = new CustomVertex.PositionTextured[3];
        private Texture texture;
        public Form1()
        {
            InitializeComponent();
            InitDevice();
        }
        private void InitDevice()
        {
            PresentParameters pp = new PresentParameters();
            pp.Windowed = true;
            pp.SwapEffect = SwapEffect.Discard;
            device = new Device(0, DeviceType.Hardware, this,
            CreateFlags.HardwareVertexProcessing, pp);
            device.Transform.Projection = Matrix.PerspectiveFovLH(3.14f / 4,
            device.Viewport.Width / device.Viewport.Height, 1f, 1000f);
            device.Transform.View = Matrix.LookAtLH(new Vector3(0, 0, 20), new
            Vector3(),
            new Vector3(0, 1, 0));
            device.RenderState.Lighting = false;
            vertex[0] = new CustomVertex.PositionTextured(new Vector3(0, 0, 0), 0,
            0);
            vertex[1] = new CustomVertex.PositionTextured(new Vector3(5, 0, 0), 0,
            1);
            vertex[2] = new CustomVertex.PositionTextured(new Vector3(0, 5, 0), -1,
1);
            texture = new Texture(device, new Bitmap("C:\\Users\\shubh\\Pictures\\pic1.jpg"),0,Pool.Managed );
        }
        private void Form1_Load(Object sender, EventArgs e)
        { }
        private void Form1_Paint(Object sender, PaintEventArgs e)
        {
            device.Clear(ClearFlags.Target, Color.CornflowerBlue, 1, 0);
            device.BeginScene();
            device.SetTexture(0, texture);
            device.VertexFormat = CustomVertex.PositionTextured.Format;
            device.DrawUserPrimitives(PrimitiveType.TriangleList, vertex.Length / 3,
            vertex);
            device.EndScene();
            device.Present();
        }
    }
}


--------------------------------------------------------------------------------------------




practical 4






using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Text;
using System.Windows.Forms;
using Microsoft.DirectX;
using Microsoft.DirectX.Direct3D;
namespace gp5

{
    public partial class Form1 : Form
    {
        private Microsoft.DirectX.Direct3D.Device device;
        private CustomVertex.PositionNormalColored[] vertex = new CustomVertex.PositionNormalColored[3];
        public Form1()
        {
            InitializeComponent();
            InitDevice();
        }
        public void InitDevice()
        {
            PresentParameters pp = new PresentParameters();
            pp.Windowed = true;
            pp.SwapEffect = SwapEffect.Discard;
            device = new Device(0, DeviceType.Hardware, this,
            CreateFlags.HardwareVertexProcessing, pp);
            device.Transform.Projection = Matrix.PerspectiveFovLH(3.14f / 4,
            device.Viewport.Width / device.Viewport.Height, 1f, 1000f);
            device.Transform.View = Matrix.LookAtLH(new Vector3(0, 0, 10), new
            Vector3(), new Vector3(0, 1, 0));
            device.RenderState.Lighting = false;
            vertex[0] = new CustomVertex.PositionNormalColored(new Vector3(0, 1,
            1), new Vector3(1, 0, 1), Color.Red.ToArgb());
            vertex[1] = new CustomVertex.PositionNormalColored(new Vector3(-1, -1,
            1), new Vector3(1, 0, 1), Color.Red.ToArgb());
            vertex[2] = new CustomVertex.PositionNormalColored(new Vector3(1, -1,
1), new Vector3(-1, 0, 1), Color.Red.ToArgb());
            device.RenderState.Lighting = true;
            device.Lights[0].Type = LightType.Directional;
            device.Lights[0].Diffuse = Color.Plum;
            device.Lights[0].Direction = new Vector3(0.8f, 0, -1);
            device.Lights[0].Enabled = true;
        }
        public void Render()
        {
            device.Clear(ClearFlags.Target, Color.CornflowerBlue, 1, 0);
            device.BeginScene();
            device.VertexFormat = CustomVertex.PositionNormalColored.Format;
            device.DrawUserPrimitives(PrimitiveType.TriangleList, vertex.Length /
            3, vertex);
            device.EndScene();
            device.Present();
        }
        private void Form1_Load(object sender, EventArgs e)
        {
        }
        private void Form1_Paint(object sender, PaintEventArgs e)
        {
            Render();
        }


    }
}

--------------------------------------------------------------------------------------------------------



pratical 5





using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Text;
using System.Windows.Forms;
using Microsoft.DirectX.Direct3D;
using Microsoft.DirectX;
namespace gp7
{
    public partial class Form1 : Form
    {
        Microsoft.DirectX.Direct3D.Device device;
        Microsoft.DirectX.Direct3D.Font font;
        Microsoft.DirectX.Direct3D.Texture texture;

        public Form1()
        {
            InitializeComponent();
            InitDevice();
            InitFont();
            InitTexture();
        }
        public void InitFont()
        {
            System.Drawing.Font f = new System.Drawing.Font("Arial", 16f, FontStyle.Regular);
            font = new Microsoft.DirectX.Direct3D.Font(device, f);
        }
        public void InitTexture()
        {
            texture = TextureLoader.FromFile(device, "C:\\Users\\shubh\\Pictures\\pic1.jpg");
        }
        public void InitDevice()
        {
            PresentParameters pp = new PresentParameters();
            pp.Windowed = true;
            pp.SwapEffect = SwapEffect.Discard;
            device = new Device(0, DeviceType.Hardware, this, CreateFlags.HardwareVertexProcessing, pp);
        }
        private void Form1_Paint(object sender, PaintEventArgs e)
        {
            device.Clear(ClearFlags.Target, Color.Bisque, 1, 0);
            device.BeginScene();
            using (Sprite s = new Sprite(device))
            {
                s.Begin(SpriteFlags.AlphaBlend);
                s.Draw2D(texture, new Rectangle(0, 0, 0, 0), new Rectangle(0, 0, device.Viewport.Width, device.Viewport.Height), new Point(0, 0), Color.White);
                font.DrawText(s, "KVP COLLEGE", new Point(0, 0), Color.Black);
                s.End();
            }
            device.EndScene();
            device.Present();
        }
    }
}



-------------------------------------------------------------------
prat 6 


using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Text;
using System.Windows.Forms;
using Microsoft.DirectX.Direct3D;
using Microsoft.DirectX;

namespace WindowsFormsApp3
{
    
    public partial class Form1 : Form
    {
        Microsoft.DirectX.Direct3D.Device device;
        public Form1()
        {
            InitializeComponent();
            InitDevice(); 
            this.SetStyle(ControlStyles.AllPaintingInWmPaint | ControlStyles.Opaque,true); 
        }
       public void InitDevice() 
        {
            PresentParameters pp = new PresentParameters();
            pp.Windowed = true;
            pp.SwapEffect = SwapEffect.Discard;
            device = new Device(0, DeviceType.Hardware, this,CreateFlags.HardwareVertexProcessing, pp);
            device.RenderState.CullMode = Cull.None;
            device.RenderState.Lighting = true;
            device.Lights[0].Type = LightType.Spot;
            device.Lights[0].Range = 4;
            device.Lights[0].Position = new Vector3(0, -1, 0f);
            device.Lights[0].Enabled = true;
        }
        public void Render() 
        {
            device.Transform.Projection = Matrix.PerspectiveFovLH((float)Math.PI / 4,
           this.Width / this.Height, 1f, 50f);
            device.Transform.View = Matrix.LookAtLH(new Vector3(0, 0, 30), new
           Vector3(1, 0, 0), new Vector3(0, 5, 0));
            CustomVertex.PositionNormalColored[] vertices = new
           CustomVertex.PositionNormalColored[6];
            vertices[0].Position = new Vector3(10f, 12f, 0f);
            vertices[0].Normal = new Vector3(0, 2, 0.5f);
            vertices[0].Color = Color.Yellow.ToArgb();
            vertices[1].Position = new Vector3(-5f, 5f, 0f);
            vertices[1].Normal = new Vector3(0, 2, 0.5f);
            vertices[1].Color = Color.Blue.ToArgb();
            vertices[2].Position = new Vector3(5f, 5f, -1f);
            vertices[2].Normal = new Vector3(0, 0, 0.5f);
            vertices[2].Color = Color.Pink.ToArgb();
            vertices[3].Position = new Vector3(5f, -5f, -1f);
            vertices[3].Normal = new Vector3(0, 0, 0.5f);
            vertices[3].Color = Color.Green.ToArgb();
            vertices[4].Position = new Vector3(10f, 12f, 0f);
            vertices[4].Normal = new Vector3(0, 0, 0.5f);
            vertices[4].Color = Color.Green.ToArgb();
            device.Clear(ClearFlags.Target, Color.Cyan, 1.0f, 0);
            device.BeginScene();
            
            device.VertexFormat = CustomVertex.PositionNormalColored.Format;
            device.Transform.World = Matrix.Translation(-5, -10 * 1 / 3, 0) *
           Matrix.RotationAxis(new Vector3(), 0);
            Console.WriteLine(device.Transform.World.ToString());
            device.DrawUserPrimitives(PrimitiveType.TriangleStrip, 3, vertices);
            device.EndScene();
            device.Present();
            this.Invalidate();
        }


        public void From1_Paint(object sender, PaintEventArgs e)
        {
            Render();
        }
    }
}

